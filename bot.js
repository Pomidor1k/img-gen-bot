const { Telegraf } = require('telegraf');
const LocalSession = require('telegraf-session-local'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Å–µ—Å—Å–∏–π
const config = require('./config');
const messages = require('./messages');
const keyboards = require('./keyboards');

// –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–µ–ø–æ–ª–∞–¥–∫–∞—Ö
const tech_problems_no_language_message = `
ü§ñ –£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏! –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã —Å—Ç–∞–ª–∫–∏–≤–∞–µ–º—Å—è —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –Ω–µ–ø–æ–ª–∞–¥–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞. –ú—ã —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Ö —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞ –∏ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üôè –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å—Ä–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @Artem_Gradusov. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! ‚ù§Ô∏è
-------------------------------
<b>ü§ñ Dear users,</b> We are currently experiencing technical issues that may temporarily limit the bot's functionality. Our team is actively working to resolve them and restore full functionality as soon as possible. We apologize for any inconvenience caused and appreciate your patience and understanding! üôè If you have any urgent questions or suggestions, please feel free to contact our support team: <a href="https://t.me/support_bot">Contact Support</a>. Thank you for being with us! ‚ù§Ô∏è
`;

const tech_problems_with_language_message = {
    ru: "ü§ñ –£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏! –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã —Å—Ç–∞–ª–∫–∏–≤–∞–µ–º—Å—è —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –Ω–µ–ø–æ–ª–∞–¥–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞. –ú—ã —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Ö —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞ –∏ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üôè –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å—Ä–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @Artem_Gradusov. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! ‚ù§Ô∏è",
    en: "ü§ñ Dear users, We are currently experiencing technical issues that may temporarily limit the bot's functionality. Our team is actively working to resolve them and restore full functionality as soon as possible. We apologize for any inconvenience caused and appreciate your patience and understanding! üôè If you have any urgent questions or suggestions, please feel free to contact our support team: @Artem_Gradusov. Thank you for being with us! ‚ù§Ô∏è"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(config.bot_token);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
const localSession = new LocalSession({
    database: 'sessions.json', // –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–µ –∏–º—è)
    storage: LocalSession.storageFileAsync, // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    format: {
        serialize: (obj) => JSON.stringify(obj, null, 2), // –§–æ—Ä–º–∞—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        deserialize: (str) => JSON.parse(str) // –§–æ—Ä–º–∞—Ç –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    }
});
bot.use(localSession.middleware()); // –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –¥–ª—è —Å–µ—Å—Å–∏–π

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
    try {
        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        ctx.session.language = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —è–∑—ã–∫
        ctx.session.modelName = ''
        await ctx.replyWithHTML(messages.choose_language_message, keyboards.choose_language_keyboard);
    } catch (error) {
        await ctx.replyWithHTML(tech_problems_no_language_message);
    }
});


bot.action(['choose_language_ru_action', 'choose_language_en_action'], async (ctx) => {
    try {
        const language = ctx.callbackQuery.data === 'choose_language_ru_action' ? 'ru' : 'en';
        ctx.session.language = language; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ —Å–µ—Å—Å–∏–∏
        await ctx.replyWithVideo({source: './content/videos/video_sample.mp4'}, {
            protect_content: true,
            parse_mode: 'HTML',
            caption: messages.start_message[language],
            ...keyboards.start_keyboard[language]
        });
    } catch (error) {
        await ctx.replyWithHTML(tech_problems_no_language_message);
    }
});

bot.action(['choose_language_ru_action', 'choose_language_en_action'], async (ctx) => {
    try {
        const language = ctx.callbackQuery.data === 'choose_language_ru_action' ? 'ru' : 'en';
        ctx.session.language = language; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ —Å–µ—Å—Å–∏–∏
        await ctx.replyWithHTML(messages.start_message[language], keyboards.start_keyboard[language]);
    } catch (error) {
        await ctx.replyWithHTML(tech_problems_no_language_message);
    }
});

bot.action(['choose_language_ru_action', 'choose_language_en_action'], async (ctx) => {
    try {
        const language = ctx.callbackQuery.data === 'choose_language_ru_action' ? 'ru' : 'en';
        ctx.session.language = language; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ —Å–µ—Å—Å–∏–∏
        await ctx.replyWithHTML(messages.start_message[language], keyboards.start_keyboard[language]);
    } catch (error) {
        await ctx.replyWithHTML(tech_problems_no_language_message);
    }
});

bot.action('learn_more_action', async (ctx) => {
    try {
        await ctx.replyWithPhoto({source: './content/images/img_sample.jpg'}, {
            protect_content: true,
            parse_mode: 'HTML',
            caption: messages.learn_more_step_1[ctx.session.language],
            ...keyboards.learn_more_step_1_keyboard[ctx.session.language]
        });
    } catch (error) {
        await ctx.replyWithHTML(tech_problems_no_language_message);
    }
});

bot.action('learn_more_go_step_2_action', async (ctx) => {
    try {
        await ctx.replyWithPhoto({source: './content/images/img_sample.jpg'}, {
            protect_content: true,
            parse_mode: 'HTML',
            caption: messages.learn_more_step_2[ctx.session.language],
            ...keyboards.learn_more_step_2_keyboard[ctx.session.language]
        });
    } catch (error) {
        await ctx.replyWithHTML(tech_problems_no_language_message);
    }
});

bot.action('learn_more_go_step_3_action', async (ctx) => {
    try {
        await ctx.replyWithPhoto({source: './content/images/img_sample.jpg'}, {
            protect_content: true,
            parse_mode: 'HTML',
            caption: messages.learn_more_step_3[ctx.session.language],
            ...keyboards.learn_more_step_3_keyboard[ctx.session.language]
        });
    } catch (error) {
        await ctx.replyWithHTML(tech_problems_no_language_message);
    }
});

bot.action('learn_more_go_step_4_action', async (ctx) => {
    try {
        await ctx.replyWithPhoto({source: './content/images/img_sample.jpg'}, {
            protect_content: true,
            parse_mode: 'HTML',
            caption: messages.learn_more_step_4[ctx.session.language],
            ...keyboards.learn_more_step_4_keyboard[ctx.session.language]
        });
    } catch (error) {
        await ctx.replyWithHTML(tech_problems_no_language_message);
    }
});

bot.action('learn_more_go_step_5_action', async (ctx) => {
    try {
        await ctx.replyWithVideo({source: './content/videos/video_sample.mp4'}, {
            protect_content: true,
            parse_mode: 'HTML',
            caption: messages.learn_more_step_5[ctx.session.language],
            ...keyboards.learn_more_step_5_keyboard[ctx.session.language]
        });
    } catch (error) {
        await ctx.replyWithHTML(tech_problems_no_language_message);
    }
});

bot.action('create_clone_action', async (ctx) => {

    ctx.session.waitingForModelName = true  // —Ñ–ª–∞–≥ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏

    try {
        await ctx.replyWithHTML(messages.learn_more_step_6[ctx.session.language])
    } catch (error) {
        await ctx.replyWithHTML(tech_problems_no_language_message);
    }
});


bot.on('text', async (ctx) => {
    if (ctx.session.waitingForModelName) {
        ctx.session.modelName = ctx.message.text
        ctx.session.waitingForModelName = false
        await ctx.replyWithHTML(messages.learn_more_step_7[ctx.session.language], keyboards.learn_more_step_7_keyboard[ctx.session.language])
    }
})


bot.action(['learn_more_go_step_8_male_action', 'learn_more_go_step_8_female_action', 'learn_more_go_step_8_nogender_action'], async (ctx) => {
    
    ctx.session.waitingForTrainingPhotos = true
    ctx.session.trainingPhotosArray = []
    
    var selected_gender
    if (ctx.callbackQuery.data === 'learn_more_go_step_8_male_action') {
        ctx.session.userGender = 'male' 
        selected_gender = {
            ru: '–ú—É–∂—á–∏–Ω–∞',
            en: 'Male'
        }
    } else if (ctx.callbackQuery.data === 'learn_more_go_step_8_female_action') {
        ctx.session.userGender = 'female'
        selected_gender = {
            ru: '–ñ–µ–Ω—â–∏–Ω–∞',
            en: 'Female'
        }
    } else {
        ctx.session.userGender = 'none'
        selected_gender = {
            ru: '–ù–µ —É–∫–∞–∑–∞–Ω',
            en: 'None'
        }
    }

    try {
        await ctx.replyWithPhoto({source: './content//images/img_sample.jpg'}, {
            protect_content: true,
            parse_mode: 'HTML',
            caption: messages.learn_more_step_8[ctx.session.language].replace('{{selected_gender}}', selected_gender[ctx.session.language]),
        })
        setTimeout(async () => {
            await ctx.replyWithHTML(messages.learn_more_step_9[ctx.session.language])
        }, 3000);
    } catch (error) {
        await ctx.replyWithHTML(tech_problems_no_language_message);
    }
});


bot.on(['photo', 'document'], async (ctx) => {
    if (ctx.session.waitingForTrainingPhotos) {
        try {
            let file;
            if (ctx.message.photo) {
                file = await ctx.telegram.getFile(ctx.message.photo[ctx.message.photo.length - 1].file_id);
            } else if (ctx.message.document && ctx.message.document.mime_type.startsWith('image/')) {
                file = await ctx.telegram.getFile(ctx.message.document.file_id);
            }

            if (file) {
                const fileLink = `https://api.telegram.org/file/bot${bot.token}/${file.file_path}`;
                ctx.session.trainingPhotosArray.push(fileLink);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if (ctx.message.media_group_id) {
                if (!ctx.session.mediaGroupTracker) {
                    ctx.session.mediaGroupTracker = {}; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤–º–µ—Å—Ç–æ Set
                }

                if (!ctx.session.mediaGroupTracker[ctx.message.media_group_id]) {
                    ctx.session.mediaGroupTracker[ctx.message.media_group_id] = true;

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã
                    setTimeout(async () => {
                        await ctx.replyWithHTML(
                            messages.learn_more_photos_uploaded[ctx.session.language].replace('{{photos_amount}}', ctx.session.trainingPhotosArray.length),
                            keyboards.learn_more_photos_uploaded_keyboard[ctx.session.language]
                        );
                        delete ctx.session.mediaGroupTracker[ctx.message.media_group_id]; // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    }, 1000);
                }
            } else {
                await ctx.replyWithHTML(
                    messages.learn_more_photos_uploaded[ctx.session.language].replace('{{photos_amount}}', ctx.session.trainingPhotosArray.length),
                    keyboards.learn_more_photos_uploaded_keyboard[ctx.session.language]
                );
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.');
        }
    }
});


bot.action('start_model_training_action', async (ctx) => {
    try {
        await ctx.replyWithHTML(messages.upload_photos_buy_subscription[ctx.session.language], keyboards.upload_photos_buy_subscription_keyboard[ctx.session.language])
    } catch (error) {
        await ctx.replyWithHTML(tech_problems_no_language_message);
    }
})


bot.action('buy_subscription_action', async (ctx) => {
    try {
        await ctx.replyWithHTML(messages.buy_subscription_intro[ctx.session.language])
        setTimeout(async () => {
            await ctx.replyWithHTML(messages.buy_subscription_standart[ctx.session.language], keyboards.buy_subscription_standart_keyboard[ctx.session.language])
        }, 2000);
    } catch (error) {
        await ctx.replyWithHTML(tech_problems_no_language_message);
    }
})

bot.action('buy_subscription_start_action', async (ctx) => {
    try {
        await ctx.editMessageText(messages.buy_subscription_start[ctx.session.language], {
            parse_mode: 'HTML',
            ...keyboards.buy_subscription_start_keyboard[ctx.session.language]
        });
    } catch (error) {
        await ctx.replyWithHTML(messages.buy_subscription_start[ctx.session.language], keyboards.buy_subscription_start_keyboard[ctx.session.language])
    }
});

bot.action('buy_subscription_pro_action', async (ctx) => {
    try {
        await ctx.editMessageText(messages.buy_subscription_pro[ctx.session.language], {
            parse_mode: 'HTML',
            ...keyboards.buy_subscription_pro_keyboard[ctx.session.language]
        });
    } catch (error) {
        await ctx.replyWithHTML(messages.buy_subscription_pro[ctx.session.language], keyboards.buy_subscription_pro_keyboard[ctx.session.language])
    }
});

bot.action('buy_subscription_standart_action', async (ctx) => {
    try {
        await ctx.editMessageText(messages.buy_subscription_standart[ctx.session.language], {
            parse_mode: 'HTML',
            ...keyboards.buy_subscription_standart_keyboard[ctx.session.language]
        });
    } catch (error) {
        await ctx.replyWithHTML(messages.buy_subscription_standart[ctx.session.language], keyboards.buy_subscription_standart_keyboard[ctx.session.language])
    }
});

bot.action(['go_to_payment_standart_action', 'go_to_payment_start_action', 'go_to_payment_pro_action'],async (ctx) => {

    if (ctx.callbackQuery.data === 'go_to_payment_start_action') {
        ctx.session.subscriptionLevel = 'start'
    } else if (ctx.callbackQuery.data === 'go_to_payment_pro_action') {
        ctx.session.subscriptionLevel = 'pro'
    } else {
        ctx.session.subscriptionLevel = 'standart'
    }

    try {
        await ctx.replyWithHTML(messages.choose_payment_method[ctx.session.language], keyboards.choose_payment_method_keyboard[ctx.session.language])
    } catch (error) {
        await ctx.replyWithHTML(tech_problems_no_language_message);
    }
})

bot.action('credit_card_payment_method_action', async (ctx) => {
    try {
        await ctx.replyWithHTML(messages.card_payment_unavailable[ctx.session.language], keyboards.card_payment_unavailable_keyboard[ctx.session.language])
    } catch (error) {
        await ctx.replyWithHTML(tech_problems_no_language_message);
    }
})

bot.action('telegram_stars_payment_method_action', async (ctx) => {
    try {
        if (ctx.session.subscriptionLevel === 'start') {
            await ctx.replyWithInvoice({
                provider_token: '',
                title: ctx.session.language === 'ru' ? '–ü–æ–¥–ø–∏—Å–∫–∞ –°–¢–ê–†–¢' : 'START subscription',
                description: ctx.session.language === 'ru' ? '–û–ø–∏—Å–∞–Ω–∏–µ' : 'description',
                payload: ctx.from.id,
                currency: 'XTR',
                prices: [{ label: 'START', amount: 500 }],
                start_parameter: 'payment_start',
                provider_data: {},
            });
        } else if (ctx.session.subscriptionLevel === 'pro') {
            await ctx.replyWithInvoice({
                provider_token: '',
                title: ctx.session.language === 'ru' ? '–ü–æ–¥–ø–∏—Å–∫–∞ –ü–†–û' : 'PRO subscription',
                description: ctx.session.language === 'ru' ? '–û–ø–∏—Å–∞–Ω–∏–µ' : 'description',
                payload: ctx.from.id,
                currency: 'XTR',
                prices: [{ label: 'PRO', amount: 1500 }],
                start_parameter: 'payment_start',
                provider_data: {},
            });
        } else {
            await ctx.replyWithInvoice({
                provider_token: '',
                title: ctx.session.language === 'ru' ? '–ü–æ–¥–ø–∏—Å–∫–∞ –°–¢–ê–ù–î–ê–†–¢' : 'STANDART subscription',
                description: ctx.session.language === 'ru' ? '–û–ø–∏—Å–∞–Ω–∏–µ' : 'description',
                payload: ctx.from.id,
                currency: 'XTR',
                prices: [{ label: 'STANDART', amount: 1000 }],
                start_parameter: 'payment_start',
                provider_data: {},
            });
        }
    } catch (error) {
        await ctx.replyWithHTML(tech_problems_no_language_message)
    }
})

bot.on('message', async (ctx) => { //!–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨!!!!!
    if (ctx.message.successful_payment) {
        const payload = ctx.message.successful_payment.invoice_payload;
        console.log(`Payload: ${payload}`);
    }
})











// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));